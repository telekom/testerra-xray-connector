plugins {
    id "io.codearte.nexus-staging" version "0.30.0"
}

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

ext {
    // Minimum required Testerra version
    testerraCompileVersion = '2.0'
    // Unit tests use the latest Testerra version
    testerraTestVersion = '[2,3-SNAPSHOT)'
    testerraTestVersion = '2.3'

    // Default version
    moduleVersion = '2-SNAPSHOT'
    if (System.properties.containsKey('moduleVersion')) {
        moduleVersion = System.getProperty('moduleVersion')
    }

    group 'io.testerra'
    version moduleVersion
}

// Do not move this integration because `group` and `version` is needed for publishing
apply from: rootProject.file('publish.gradle')

dependencies {
    compileOnly 'io.testerra:core:' + testerraCompileVersion

    implementation 'org.reflections:reflections:0.9.12'
    implementation 'commons-codec:commons-codec:1.13'

    // https://mvnrepository.com/artifact/org.glassfish.jersey.core/jersey-client
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.31'

    implementation 'javax.ws.rs:javax.ws.rs-api:2.0.1'
    implementation 'com.sun.jersey:jersey-client:1.19.3'
    implementation 'com.sun.jersey.contribs:jersey-multipart:1.19.3'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.3.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.3.1'

    // Workaround for a ClassNotFoundException, see https://github.com/telekom/testerra-xray-connector/issues/8
    implementation 'javax.activation:activation:1.1.1'

    testImplementation 'io.testerra:driver-ui-desktop:' + testerraTestVersion
    testImplementation 'io.testerra:report-ng:' + testerraTestVersion
}

test {
    def profiles = [
            "pre1": "integration_pre-tests1.xml",
            "pre2": "integration_pre-tests2.xml",
            "pre3": "integration_pre-tests3.xml",
            "pre4": "integration_pre-tests4.xml",
            "integration": "integration_tests.xml"
    ]

    def suiteFiles = []
    profiles.each { k, v ->
        if (project.hasProperty("" + k)) {
            def f = 'src/test/resources/' + v
            suiteFiles << f
        }
    }

    useTestNG() {
        suites(suiteFiles as String[])
        testLogging {
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
        options {
            systemProperties(System.getProperties())
        }
        ignoreFailures = true
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
